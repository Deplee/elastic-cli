#!/usr/bin/env python3
import os
import sys
from dotenv import load_dotenv

from rich.console import Console
from rich.panel import Panel

import cmd2

load_dotenv()

from .config import ConfigManager
from .connection import ElasticsearchConnection
from .commands import (
    ClusterCommands,
    IndexCommands,
    ILMCommands,
    TemplateCommands,
    SnapshotCommands
)


class ElasticsearchCLI(cmd2.Cmd):
    
    def __init__(self):
        super().__init__()
        self.console = Console()
        self.prompt = "elastic-cli> "
        self.config_file = os.path.expanduser("~/.elastic-cli/config.yml")
        

        self.config_manager = ConfigManager(self.config_file)
        self.connection = ElasticsearchConnection()
        
        self.cluster_commands = ClusterCommands(self)
        self.index_commands = IndexCommands(self)
        self.ilm_commands = ILMCommands(self)
        self.template_commands = TemplateCommands(self)
        self.snapshot_commands = SnapshotCommands(self)
        
        self.config_manager.load_config()
        
        current_context = self.config_manager.get_current_context()
        if current_context:
            self._switch_context(current_context)
    
    def format_bytes(self, size, decimals=2):
        if not isinstance(size, (int, float)) or size == 0:
            return "0 Bytes"
        import math
        k = 1024
        dm = decimals if decimals >= 0 else 0
        sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
        i = math.floor(math.log(size) / math.log(k)) if size > 0 else 0
        return f"{round(size / math.pow(k, i), dm)} {sizes[i]}"
    
    def make_request(self, endpoint: str, method: str = 'GET', data: dict = None):
        return self.connection.make_request(endpoint, method, data)
    
    def _update_prompt(self):
        current_context = self.config_manager.get_current_context()
        if current_context:
            self.prompt = f"({current_context}) elastic-cli> "
        else:
            self.prompt = "(no context) elastic-cli> "

    def _switch_context(self, context_name: str) -> bool:
        context = self.config_manager.get_context(context_name)
        if not context:
            self.console.print(f"[red]–ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/red]")
            return False

        url = context.get('url')
        username = context.get('username')
        password = context.get('password')

        self.connection.set_connection(url, username, password)

        if self.connection.check_connection():
            self.config_manager.set_current_context(context_name)
            self._update_prompt()
            self.console.print(f"[green]–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç: [bold]{context_name}[/bold] ({url})[/green]")
            return True
        else:
            self.console.print(f"[red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ '{context_name}'.[/red]")
            self.connection.clear_connection()
            self.config_manager.set_current_context(None)
            self._update_prompt()
            return False

    def preloop(self):
        intro_text = """
[bold blue]‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó[/bold blue]
[bold blue]‚ïë                    [white]Elasticsearch CLI[/white]                         ‚ïë[/bold blue]
[bold blue]‚ïë              [white]–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–º[/white]              ‚ïë[/bold blue]
[bold blue]‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù[/bold blue]

[dim]–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∫–ª–∞—Å—Ç–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã [bold white]connect[/bold white][/dim]
[dim]–í–≤–µ–¥–∏—Ç–µ [bold white]help[/bold white] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥[/dim]
"""
        self.console.print(Panel(intro_text, title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", border_style="blue", expand=False))
    

    
    def do_connect(self, arg):
        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Elasticsearch –∫–ª–∞—Å—Ç–µ—Ä—É[/bold blue]

[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/bold]
–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Elasticsearch –∫–ª–∞—Å—Ç–µ—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

[bold]–°–∏–Ω—Ç–∞–∫—Å–∏—Å:[/bold]
[cyan]connect <–∏–º—è_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞>[/cyan]

[bold]–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:[/bold]
‚Ä¢ [cyan]<–∏–º—è_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞>[/cyan] - —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

[bold]–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:[/bold]
1. –í–≤–µ–¥–∏—Ç–µ URL Elasticsearch (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:9200)
2. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
3. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
4. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç

[bold]–ü—Ä–∏–º–µ—Ä—ã:[/bold]
‚Ä¢ connect production
‚Ä¢ connect staging
‚Ä¢ connect local-dev

[bold]–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:[/bold]
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [cyan]context use <–∏–º—è>[/cyan] –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏.

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: connect", border_style="blue", expand=False))
            return

        if not arg:
            self.console.print("[red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.[/red]")
            self.console.print("[yellow]–ü—Ä–∏–º–µ—Ä: connect my-prod-cluster[/yellow]")
            return
        
        context_name = arg.strip()
        if self.config_manager.get_context(context_name):
            if not cmd2.Cmd2ArgumentParser().confirm(f"[yellow]–ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?[/yellow]"):
                return
        
        from rich.prompt import Prompt
        url = Prompt.ask("URL Elasticsearch", default="http://localhost:9200")
        username = Prompt.ask("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)")
        password = Prompt.ask("–ü–∞—Ä–æ–ª—å", password=True) if username else ""
        
        self.connection.set_connection(url, username, password)

        with self.console.status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."):
            if self.connection.check_connection():
                context_data = {
                    'url': url,
                    'username': username,
                    'password': password
                }
                self.config_manager.add_context(context_name, context_data)
                self.console.print(f"[green]–ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.[/green]")
                self._switch_context(context_name)
            else:
                self.console.print("[red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∞—Å—Ç–µ—Ä—É. –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.[/red]")

    def do_context(self, arg):
        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π[/bold blue]

[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/bold]
–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ Elasticsearch –∫–ª–∞—Å—Ç–µ—Ä–∞–º.

[bold]–ö–æ–º–∞–Ω–¥—ã:[/bold]
‚Ä¢ [cyan]context list[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
‚Ä¢ [cyan]context use <–∏–º—è>[/cyan] - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
‚Ä¢ [cyan]context delete <–∏–º—è>[/cyan] - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
‚Ä¢ [cyan]context show <–∏–º—è>[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

[bold]–ü—Ä–∏–º–µ—Ä—ã:[/bold]
‚Ä¢ context list
‚Ä¢ context use production
‚Ä¢ context delete old-cluster
‚Ä¢ context show staging

[bold]–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:[/bold]
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É [cyan]connect <–∏–º—è_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞>[/cyan] –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ~/.elastic-cli/config.yml[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: context", border_style="blue", expand=False))
            return

        parts = arg.split()
        if not parts:
            self.console.print("[red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è 'context'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: list, use, delete, show.[/red]")
            return

        command = parts[0]
        if command == 'list':
            from rich.table import Table
            from rich import box
            
            table = Table(title="üóÇÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", box=box.ROUNDED)
            table.add_column("–ê–∫—Ç–∏–≤–Ω—ã–π", style="green")
            table.add_column("–ò–º—è", style="cyan")
            table.add_column("URL", style="magenta")
            table.add_column("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", style="yellow")
            
            current_context = self.config_manager.get_current_context()
            for name, details in self.config_manager.contexts.items():
                is_active = "‚úÖ" if name == current_context else ""
                table.add_row(is_active, name, details.get('url'), details.get('username', 'N/A'))
            self.console.print(table)
        
        elif command == 'use':
            if len(parts) < 2:
                self.console.print("[red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.[/red]")
                return
            context_name = parts[1]
            self._switch_context(context_name)

        elif command == 'delete':
            if len(parts) < 2:
                self.console.print("[red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.[/red]")
                return
            context_name = parts[1]
            if not self.config_manager.get_context(context_name):
                self.console.print(f"[red]–ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/red]")
                return
            
            if cmd2.Cmd2ArgumentParser().confirm(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}'?"):
                self.config_manager.remove_context(context_name)
                self.console.print(f"[green]–ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' —É–¥–∞–ª–µ–Ω.[/green]")

        elif command == 'show':
            if len(parts) < 2:
                self.console.print("[red]–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.[/red]")
                return
            context_name = parts[1]
            details = self.config_manager.get_context(context_name)
            if not details:
                self.console.print(f"[red]–ö–æ–Ω—Ç–µ–∫—Å—Ç '{context_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.[/red]")
                return
            
            panel = Panel(
                f"[bold]URL:[/] {details.get('url')}\n"
                f"[bold]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:[/] {details.get('username') or 'N/A'}",
                title=f"–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: [cyan]{context_name}[/cyan]",
                border_style="blue"
            )
            self.console.print(panel)
        else:
            self.console.print(f"[red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è 'context': '{command}'.[/red]")
            self.console.print("[yellow]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: list, use, delete, show.[/yellow]")
    
    def do_health(self, arg):
        self.cluster_commands.do_health(arg)
    
    def do_nodes(self, arg):
        self.cluster_commands.do_nodes(arg)
    
    def do_indices(self, arg):
        self.index_commands.do_indices(arg)
    
    def do_shards(self, arg):
        self.cluster_commands.do_shards(arg)
    
    def do_tasks(self, arg):
        self.cluster_commands.do_tasks(arg)
    
    def do_snapshots(self, arg):
        self.snapshot_commands.do_snapshots(arg)
    
    def do_settings(self, arg):
        self.cluster_commands.do_settings(arg)
    
    def do_ilm(self, arg):
        self.ilm_commands.do_ilm(arg)
    
    def do_templates(self, arg):
        self.template_commands.do_templates(arg)
    
    def do_quit(self, arg):
        self.console.print("[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã[/yellow]")
        return True
    
    def do_exit(self, arg):
        return self.do_quit(arg)
    
    def do_EOF(self, arg):
        return self.do_quit(arg)


def main():
    try:
        cli = ElasticsearchCLI()
        cli.cmdloop()
    except KeyboardInterrupt:
        print("\n[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã[/yellow]")
    except Exception as e:
        print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")


if __name__ == "__main__":
    main()
