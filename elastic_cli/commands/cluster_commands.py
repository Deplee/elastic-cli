import json
from typing import Dict
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.syntax import Syntax
from rich import box

from .base import BaseCommand


class ClusterCommands(BaseCommand):
    
    def do_health(self, arg):
        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]üè• –ó–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ Elasticsearch[/bold blue]

[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/bold]
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–ª–∞—Å—Ç–µ—Ä–∞ Elasticsearch, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∏ —à–∞—Ä–¥–æ–≤.

[bold]–°–∏–Ω—Ç–∞–∫—Å–∏—Å:[/bold]
[cyan]health[/cyan]

[bold]–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:[/bold]
‚Ä¢ [bold]–ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞[/bold] - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
‚Ä¢ [bold]–°—Ç–∞—Ç—É—Å[/bold] - green/yellow/red (—Ü–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è)
‚Ä¢ [bold]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤[/bold] - –æ–±—â–µ–µ —á–∏—Å–ª–æ —É–∑–ª–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
‚Ä¢ [bold]–ê–∫—Ç–∏–≤–Ω—ã–µ —à–∞—Ä–¥—ã[/bold] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–¥–æ–≤
‚Ä¢ [bold]–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–≤–∏—á–Ω—ã–µ —à–∞—Ä–¥—ã[/bold] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —à–∞—Ä–¥–æ–≤
‚Ä¢ [bold]–ü–µ—Ä–µ–º–µ—â–∞—é—â–∏–µ—Å—è —à–∞—Ä–¥—ã[/bold] - —à–∞—Ä–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
‚Ä¢ [bold]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–µ—Å—è —à–∞—Ä–¥—ã[/bold] - —à–∞—Ä–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ [bold]–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —à–∞—Ä–¥—ã[/bold] - —à–∞—Ä–¥—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞

[bold]–°—Ç–∞—Ç—É—Å—ã –∫–ª–∞—Å—Ç–µ—Ä–∞:[/bold]
‚Ä¢ [green]green[/green] - –≤—Å–µ —à–∞—Ä–¥—ã –∞–∫—Ç–∏–≤–Ω—ã
‚Ä¢ [yellow]yellow[/yellow] - –≤—Å–µ –ø–µ—Ä–≤–∏—á–Ω—ã–µ —à–∞—Ä–¥—ã –∞–∫—Ç–∏–≤–Ω—ã, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–ø–ª–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
‚Ä¢ [red]red[/red] - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–≤–∏—á–Ω—ã–µ —à–∞—Ä–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã

[bold]–ü—Ä–∏–º–µ—Ä:[/bold]
‚Ä¢ health

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: health", border_style="blue", expand=False))
            return

        data = self.cli.make_request("/_cluster/health")
        if not data:
            return
        

        table = Table(title="üè• –ó–¥–æ—Ä–æ–≤—å–µ –∫–ª–∞—Å—Ç–µ—Ä–∞", box=box.ROUNDED)
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", no_wrap=True)
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")
        
        status_color = {
            'green': 'green',
            'yellow': 'yellow', 
            'red': 'red'
        }
        
        table.add_row("–ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞", data.get('cluster_name', 'N/A'))
        table.add_row("–°—Ç–∞—Ç—É—Å", f"[{status_color.get(data.get('status', 'white'), 'white')}]{data.get('status', 'N/A')}[/{status_color.get(data.get('status', 'white'), 'white')}]")
        table.add_row("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤", str(data.get('number_of_nodes', 0)))
        table.add_row("–ê–∫—Ç–∏–≤–Ω—ã–µ —à–∞—Ä–¥—ã", str(data.get('active_shards', 0)))
        table.add_row("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–≤–∏—á–Ω—ã–µ —à–∞—Ä–¥—ã", str(data.get('active_primary_shards', 0)))
        table.add_row("–ü–µ—Ä–µ–º–µ—â–∞—é—â–∏–µ—Å—è —à–∞—Ä–¥—ã", str(data.get('relocating_shards', 0)))
        table.add_row("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–µ—Å—è —à–∞—Ä–¥—ã", str(data.get('initializing_shards', 0)))
        table.add_row("–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —à–∞—Ä–¥—ã", str(data.get('unassigned_shards', 0)))
        
        self.console.print(table)
    
    def do_nodes(self, arg):

        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∑–ª–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞[/bold blue]

[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/bold]
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —É–∑–ª–∞—Ö –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ Elasticsearch, –≤–∫–ª—é—á–∞—è –∏—Ö —Ä–æ–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å.

[bold]–°–∏–Ω—Ç–∞–∫—Å–∏—Å:[/bold]
[cyan]nodes[/cyan]

[bold]–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:[/bold]
‚Ä¢ [bold]–ò–º—è —É–∑–ª–∞[/bold] - –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∑–ª–∞
‚Ä¢ [bold]ID[/bold] - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∑–ª–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
‚Ä¢ [bold]–†–æ–ª–∏[/bold] - —Ä–æ–ª–∏ —É–∑–ª–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ (data, master, ingest)
‚Ä¢ [bold]CPU %[/bold] - –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
‚Ä¢ [bold]–ü–∞–º—è—Ç—å %[/bold] - –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
‚Ä¢ [bold]–î–∏—Å–∫ %[/bold] - –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

[bold]–†–æ–ª–∏ —É–∑–ª–æ–≤:[/bold]
‚Ä¢ [cyan]data[/cyan] - —É–∑–µ–ª –¥–∞–Ω–Ω—ã—Ö (—Ö—Ä–∞–Ω–∏—Ç –∏–Ω–¥–µ–∫—Å—ã)
‚Ä¢ [cyan]master[/cyan] - –º–∞—Å—Ç–µ—Ä-—É–∑–µ–ª (—É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–æ–º)
‚Ä¢ [cyan]ingest[/cyan] - —É–∑–µ–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç pipeline)

[bold]–ü—Ä–∏–º–µ—Ä:[/bold]
‚Ä¢ nodes

[bold]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:[/bold]
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–∑–ª–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∞.

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: nodes", border_style="blue", expand=False))
            return

        data = self.cli.make_request("/_nodes/stats")
        if not data:
            return
        
        table = Table(title="üñ•Ô∏è –£–∑–ª—ã –∫–ª–∞—Å—Ç–µ—Ä–∞", box=box.ROUNDED)
        table.add_column("–ò–º—è —É–∑–ª–∞", style="cyan")
        table.add_column("ID", style="blue")
        table.add_column("–†–æ–ª–∏", style="green")
        table.add_column("CPU %", style="yellow")
        table.add_column("–ü–∞–º—è—Ç—å %", style="magenta")
        table.add_column("–î–∏—Å–∫ %", style="red")
        
        for node_id, node_data in data['nodes'].items():
            stats = node_data.get('os', {})
            process = node_data.get('process', {})
            
            cpu_percent = stats.get('cpu', {}).get('percent', 0)
            mem_percent = stats.get('mem', {}).get('used_percent', 0)
            
            fs_stats = node_data.get('fs', {})
            total_disk = fs_stats.get('total', {}).get('total_in_bytes', 0)
            free_disk = fs_stats.get('total', {}).get('free_in_bytes', 0)
            disk_percent = ((total_disk - free_disk) / total_disk * 100) if total_disk > 0 else 0
            
            roles = node_data.get('roles', [])
            
            table.add_row(
                node_data.get('name', 'N/A'),
                node_id[:8] + '...',
                ', '.join(roles),
                f"{cpu_percent:.1f}%",
                f"{mem_percent:.1f}%",
                f"{disk_percent:.1f}%"
            )
        
        self.console.print(table)
    
    def do_shards(self, arg):
        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞—Ä–¥–∞—Ö[/bold blue]

[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/bold]
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —à–∞—Ä–¥–∞—Ö –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ —Å—Ç–∞—Ç—É—Å—É. –ü–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.

[bold]–°–∏–Ω—Ç–∞–∫—Å–∏—Å:[/bold]
[cyan]shards[/cyan]

[bold]–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:[/bold]
‚Ä¢ [bold]–ò–Ω–¥–µ–∫—Å[/bold] - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
‚Ä¢ [bold]–®–∞—Ä–¥[/bold] - –Ω–æ–º–µ—Ä —à–∞—Ä–¥–∞
‚Ä¢ [bold]–£–∑–µ–ª[/bold] - —É–∑–µ–ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–º–µ—â–µ–Ω —à–∞—Ä–¥
‚Ä¢ [bold]–†–∞–∑–º–µ—Ä[/bold] - —Ä–∞–∑–º–µ—Ä —à–∞—Ä–¥–∞ –Ω–∞ –¥–∏—Å–∫–µ
‚Ä¢ [bold]–î–æ–∫—É–º–µ–Ω—Ç—ã[/bold] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —à–∞—Ä–¥–µ

[bold]–°—Ç–∞—Ç—É—Å—ã —à–∞—Ä–¥–æ–≤:[/bold]
‚Ä¢ [green]STARTED[/green] - —à–∞—Ä–¥ –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ [yellow]RELOCATING[/yellow] - —à–∞—Ä–¥ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —É–∑–µ–ª
‚Ä¢ [blue]INITIALIZING[/blue] - —à–∞—Ä–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
‚Ä¢ [red]UNASSIGNED[/red] - —à–∞—Ä–¥ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–Ω–æ–º—É —É–∑–ª—É

[bold]–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞:[/bold]
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º.

[bold]–ü—Ä–∏–º–µ—Ä:[/bold]
‚Ä¢ shards

[bold]–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:[/bold]
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —à–∞—Ä–¥–æ–≤ –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: shards", border_style="blue", expand=False))
            return

        data = self.cli.make_request("/_cat/shards?format=json&v")
        if not data:
            return
        
        status_groups = {}
        for shard in data:
            status = shard.get('state', 'unknown')
            if status not in status_groups:
                status_groups[status] = []
            status_groups[status].append(shard)
        
        for status, shards in status_groups.items():
            status_color = {
                'STARTED': 'green',
                'RELOCATING': 'yellow',
                'INITIALIZING': 'blue',
                'UNASSIGNED': 'red'
            }
            
            table = Table(
                title=f"üîó –®–∞—Ä–¥—ã - {status} ({len(shards)})",
                box=box.ROUNDED
            )
            table.add_column("–ò–Ω–¥–µ–∫—Å", style="cyan")
            table.add_column("–®–∞—Ä–¥", style="blue")
            table.add_column("–£–∑–µ–ª", style="green")
            table.add_column("–†–∞–∑–º–µ—Ä", style="yellow")
            table.add_column("–î–æ–∫—É–º–µ–Ω—Ç—ã", style="magenta")
            
            for shard in shards:
                table.add_row(
                    shard.get('index', 'N/A'),
                    shard.get('shard', 'N/A'),
                    shard.get('node', 'N/A'),
                    shard.get('store', '0b'),
                    shard.get('docs', '0')
                )
            
            self.console.print(table)
    
    def do_tasks(self, arg):
        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ[/bold blue]

[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/bold]
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ Elasticsearch. –í–∫–ª—é—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.

[bold]–°–∏–Ω—Ç–∞–∫—Å–∏—Å:[/bold]
[cyan]tasks[/cyan]

[bold]–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:[/bold]
‚Ä¢ [bold]–£–∑–µ–ª[/bold] - —É–∑–µ–ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞
‚Ä¢ [bold]ID –∑–∞–¥–∞—á–∏[/bold] - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
‚Ä¢ [bold]–¢–∏–ø[/bold] - —Ç–∏–ø –∑–∞–¥–∞—á–∏ (transport, direct, etc.)
‚Ä¢ [bold]–î–µ–π—Å—Ç–≤–∏–µ[/bold] - –≤—ã–ø–æ–ª–Ω—è–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
‚Ä¢ [bold]–û–ø–∏—Å–∞–Ω–∏–µ[/bold] - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

[bold]–¢–∏–ø—ã –∑–∞–¥–∞—á:[/bold]
‚Ä¢ [cyan]transport[/cyan] - –∑–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π
‚Ä¢ [cyan]direct[/cyan] - –ø—Ä—è–º—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É–∑–ª–µ
‚Ä¢ [cyan]cluster:monitor[/cyan] - –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
‚Ä¢ [cyan]indices:data/read[/cyan] - –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ [cyan]indices:data/write[/cyan] - –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö

[bold]–ü—Ä–∏–º–µ—Ä:[/bold]
‚Ä¢ tasks

[bold]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:[/bold]
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: tasks", border_style="blue", expand=False))
            return

        data = self.cli.make_request("/_tasks")
        if not data:
            return
        
        tasks = data.get('nodes', {})
        if not tasks:
            self.console.print("[yellow]–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á[/yellow]")
            return
        
        table = Table(title="‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", box=box.ROUNDED)
        table.add_column("–£–∑–µ–ª", style="cyan")
        table.add_column("ID –∑–∞–¥–∞—á–∏", style="blue")
        table.add_column("–¢–∏–ø", style="green")
        table.add_column("–î–µ–π—Å—Ç–≤–∏–µ", style="yellow")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta")
        
        for node_id, node_tasks in tasks.items():
            for task_id, task_data in node_tasks.get('tasks', {}).items():
                description = task_data.get('description', 'N/A')
                if len(description) > 50:
                    description = description[:50] + '...'
                
                table.add_row(
                    node_id[:8] + '...',
                    task_id,
                    task_data.get('type', 'N/A'),
                    task_data.get('action', 'N/A'),
                    description
                )
        
        self.console.print(table)
    
    def do_settings(self, arg):
        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞[/bold blue]

[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/bold]
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ Elasticsearch, –≤–∫–ª—é—á–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.

[bold]–°–∏–Ω—Ç–∞–∫—Å–∏—Å:[/bold]
[cyan]settings[/cyan]

[bold]–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:[/bold]
‚Ä¢ [bold]–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é[/bold] - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
‚Ä¢ [bold]–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏[/bold] - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
‚Ä¢ [bold]–¢—Ä–∞–Ω–∑–∏–µ–Ω—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏[/bold] - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ

[bold]–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:[/bold]
‚Ä¢ [cyan]cluster[/cyan] - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ (–∏–º—è, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∑–ª–æ–≤)
‚Ä¢ [cyan]indices[/cyan] - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ (—Ä–∞–∑–º–µ—Ä —à–∞—Ä–¥–æ–≤, —Ä–µ–ø–ª–∏–∫–∏)
‚Ä¢ [cyan]path[/cyan] - –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º –∏ –ª–æ–≥–∞–º
‚Ä¢ [cyan]network[/cyan] - —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ [cyan]discovery[/cyan] - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–∑–ª–æ–≤

[bold]–ü—Ä–∏–º–µ—Ä:[/bold]
‚Ä¢ settings

[bold]–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:[/bold]
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ Elasticsearch API –∏–ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: settings", border_style="blue", expand=False))
            return

        data = self.cli.make_request("/_cluster/settings")
        if not data:
            return
        
        self.console.print(Panel(
            json.dumps(data, indent=2, ensure_ascii=False),
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞",
            border_style="blue"
        ))
