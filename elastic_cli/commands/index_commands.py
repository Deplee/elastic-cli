"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ Elasticsearch
"""

import json
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.syntax import Syntax
from rich import box
from .base import BaseCommand


class IndexCommands(BaseCommand):
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
    
    def do_indices(self, arg):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞–º–∏.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
- indices: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã
- indices <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞>: –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- indices <–∫–æ–º–∞–Ω–¥–∞> <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞>: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É (delete, open, close, settings, forcemerge)
- indices forcemerge <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞> <—Ç–∏–ø>: –≤—ã–ø–æ–ª–Ω–∏—Ç—å forcemerge
  - —Ç–∏–ø: segments - –¥–ª—è max_num_segments=N & waiting for completion=false
  - —Ç–∏–ø: expunge - –¥–ª—è only_expunge_deletes=true & waiting for completion=false
"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help
        if arg in ["-h", "--help", "help"]:
            help_text = """
[bold blue]üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞–º–∏ Elasticsearch[/bold blue]

[bold]–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:[/bold]
‚Ä¢ [cyan]indices[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
‚Ä¢ [cyan]indices <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞>[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–µ

[bold]–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏:[/bold]
‚Ä¢ [cyan]indices delete <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞>[/cyan] - —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
‚Ä¢ [cyan]indices close <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞>[/cyan] - –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–µ–∫—Å
‚Ä¢ [cyan]indices open <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞>[/cyan] - –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω–¥–µ–∫—Å
‚Ä¢ [cyan]indices settings <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞>[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∞

[bold]Forcemerge –æ–ø–µ—Ä–∞—Ü–∏–∏:[/bold]
‚Ä¢ [cyan]indices forcemerge <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞> segments[/cyan] - –≤—ã–ø–æ–ª–Ω–∏—Ç—å forcemerge —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
  - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (N)
  - –í—ã–ø–æ–ª–Ω—è–µ—Ç: _forcemerge?max_num_segments=N&wait_for_completion=false
  
‚Ä¢ [cyan]indices forcemerge <–∏–º—è_–∏–Ω–¥–µ–∫—Å–∞> expunge[/cyan] - –≤—ã–ø–æ–ª–Ω–∏—Ç—å forcemerge —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  - –í—ã–ø–æ–ª–Ω—è–µ—Ç: _forcemerge?only_expunge_deletes=true&wait_for_completion=false

[bold]–ü—Ä–∏–º–µ—Ä—ã:[/bold]
‚Ä¢ indices
‚Ä¢ indices my-index
‚Ä¢ indices delete old-index
‚Ä¢ indices forcemerge my-index segments
‚Ä¢ indices forcemerge my-index expunge

[dim]–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏[/dim]
"""
            self.console.print(Panel(help_text, title="–°–ø—Ä–∞–≤–∫–∞: indices", border_style="blue", expand=False))
            return

        if not arg:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
            data = self.cli.make_request("/_cat/indices?format=json&v")
            if not data:
                return
            
            table = Table(title="üìö –ò–Ω–¥–µ–∫—Å—ã", box=box.ROUNDED)
            table.add_column("–ò–Ω–¥–µ–∫—Å", style="cyan")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
            table.add_column("–î–æ–∫—É–º–µ–Ω—Ç—ã", style="blue")
            table.add_column("–†–∞–∑–º–µ—Ä", style="yellow")
            table.add_column("–ü–µ—Ä–≤–∏—á–Ω—ã–µ —à–∞—Ä–¥—ã", style="magenta")
            table.add_column("–†–µ–ø–ª–∏–∫–∏", style="red")
            
            for index in data:
                status_color = {
                    'green': 'green',
                    'yellow': 'yellow',
                    'red': 'red'
                }
                
                table.add_row(
                    index.get('index', 'N/A'),
                    f"[{status_color.get(index.get('health', 'white'), 'white')}]{index.get('health', 'N/A')}[/{status_color.get(index.get('health', 'white'), 'white')}]",
                    index.get('docs.count', '0'),
                    index.get('store.size', '0b'),
                    index.get('pri', '0'),
                    index.get('rep', '0')
                )
            
            self.console.print(table)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤
            parts = arg.split()
            command = parts[0]
            
            if command in ("delete", "close", "open", "settings", "forcemerge"):
                if len(parts) < 2:
                    self.console.print(f"[red]–û—à–∏–±–∫–∞: –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command}' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–Ω–¥–µ–∫—Å–∞.[/red]")
                    return
                
                index_name = parts[1]

                if command == "delete":
                    if Confirm.ask(f"–£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å '{index_name}'?"):
                        result = self.cli.make_request(f"/{index_name}", method="DELETE")
                        if result:
                            self.console.print(f"[green]–ò–Ω–¥–µ–∫—Å '{index_name}' —É–¥–∞–ª–µ–Ω[/green]")
                
                elif command == "close":
                    result = self.cli.make_request(f"/{index_name}/_close", method="POST")
                    if result:
                        self.console.print(f"[green]–ò–Ω–¥–µ–∫—Å '{index_name}' –∑–∞–∫—Ä—ã—Ç[/green]")
                
                elif command == "open":
                    result = self.cli.make_request(f"/{index_name}/_open", method="POST")
                    if result:
                        self.console.print(f"[green]–ò–Ω–¥–µ–∫—Å '{index_name}' –æ—Ç–∫—Ä—ã—Ç[/green]")
                
                elif command == "settings":
                    data = self.cli.make_request(f"/{index_name}/_settings")
                    if data:
                        settings_str = json.dumps(data, indent=2, ensure_ascii=False)
                        self.console.print(Panel(
                            Syntax(settings_str, "json", theme="monokai", line_numbers=True),
                            title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ {index_name}",
                            border_style="blue"
                        ))
                
                elif command == "forcemerge":
                    if len(parts) < 3:
                        self.console.print("[red]–û—à–∏–±–∫–∞: –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'forcemerge' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.[/red]")
                        self.console.print("[yellow]–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: segments, expunge[/yellow]")
                        return
                    
                    merge_type = parts[2]
                    
                    if merge_type == "segments":
                        if Confirm.ask(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å forcemerge —Å max_num_segments –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '{index_name}'?"):
                            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                            max_segments = Prompt.ask("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (N)", default="1")
                            try:
                                max_segments = int(max_segments)
                                result = self.cli.make_request(f"/{index_name}/_forcemerge?max_num_segments={max_segments}&wait_for_completion=false", method="POST")
                                if result:
                                    self.console.print(f"[green]Forcemerge –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '{index_name}' —Å max_num_segments={max_segments}[/green]")
                            except ValueError:
                                self.console.print("[red]–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.[/red]")
                    
                    elif merge_type == "expunge":
                        if Confirm.ask(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å forcemerge —Å only_expunge_deletes –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '{index_name}'?"):
                            result = self.cli.make_request(f"/{index_name}/_forcemerge?only_expunge_deletes=true&wait_for_completion=false", method="POST")
                            if result:
                                self.console.print(f"[green]Forcemerge –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '{index_name}' —Å only_expunge_deletes=true[/green]")
                    
                    else:
                        self.console.print(f"[red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø forcemerge: '{merge_type}'[/red]")
                        self.console.print("[yellow]–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: segments, expunge[/yellow]")
            else:
                # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ —ç—Ç–æ –∏–º—è –∏–Ω–¥–µ–∫—Å–∞
                index_name = command
                self._show_index_info(index_name)
    
    def _show_index_info(self, index_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –∏–Ω–¥–µ–∫—Å–µ."""
        with self.console.status(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ [bold]{index_name}[/bold]..."):
            index_data = self.cli.make_request(f"/{index_name}")
            index_stats = self.cli.make_request(f"/{index_name}/_stats/docs,store")
            sim_data = self.cli.make_request(f"/_index_template/_simulate_index/{index_name}", method='POST')
        
        if not index_data or not index_stats:
            self.console.print(f"[red]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–µ '{index_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è.[/red]")
            return

        index_details = index_data.get(index_name)
        if not index_details:
            self.console.print(f"[red]–ù–µ –Ω–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å —Å –∏–º–µ–Ω–µ–º '{index_name}'[/red]")
            return
            
        index_stats_total = index_stats.get('indices', {}).get(index_name, {}).get('total', {})

        stats_store = index_stats_total.get('store', {})
        stats_docs = index_stats_total.get('docs', {})
        settings = index_details.get('settings', {}).get('index', {})

        main_info_table = Table(box=box.MINIMAL, show_header=False)
        main_info_table.add_column(style="dim")
        main_info_table.add_column()
        main_info_table.add_row("UUID", settings.get('uuid', 'N/A'))
        main_info_table.add_row("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", f"{stats_docs.get('count', 0):,}")
        main_info_table.add_row("–†–∞–∑–º–µ—Ä", self.cli.format_bytes(stats_store.get('size_in_bytes', 0)))
        main_info_table.add_row("–®–∞—Ä–¥—ã", settings.get('number_of_shards', 'N/A'))
        main_info_table.add_row("–†–µ–ø–ª–∏–∫–∏", settings.get('number_of_replicas', 'N/A'))
        
        ilm_policy = settings.get('lifecycle', {}).get('name')
        if ilm_policy:
            main_info_table.add_row("ILM –ü–æ–ª–∏—Ç–∏–∫–∞", f"[bold green]{ilm_policy}[/bold green]")

        if sim_data and sim_data.get('overlapping_templates'):
            template_names = [t['name'] for t in sim_data['overlapping_templates']]
            main_info_table.add_row("–®–∞–±–ª–æ–Ω(—ã)", f"[bold blue]{', '.join(template_names)}[/bold blue]")
        elif sim_data is None:
            main_info_table.add_row("–®–∞–±–ª–æ–Ω(—ã)", "[dim]–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é[/dim]")
        
        self.console.print(Panel(
            main_info_table, 
            title=f"–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: [bold cyan]{index_name}[/bold cyan]",
            border_style="green"
        ))
        
        aliases = index_details.get('aliases', {})
        if aliases:
            aliases_table = Table(title="–ê–ª–∏–∞—Å—ã", box=box.ROUNDED)
            aliases_table.add_column("–ò–º—è –∞–ª–∏–∞—Å–∞", style="cyan")
            for alias in aliases:
                aliases_table.add_row(alias)
            self.console.print(aliases_table)

        settings_str = json.dumps(settings, indent=2, ensure_ascii=False)
        self.console.print(Panel(
            Syntax(settings_str, "json", theme="monokai", line_numbers=True),
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", border_style="blue", expand=False
        ))

        mappings_str = json.dumps(index_details.get('mappings', {}), indent=2, ensure_ascii=False)
        self.console.print(Panel(
            Syntax(mappings_str, "json", theme="monokai", line_numbers=True),
            title="üó∫Ô∏è –ú–∞–ø–ø–∏–Ω–≥–∏", border_style="blue", expand=False
        ))
